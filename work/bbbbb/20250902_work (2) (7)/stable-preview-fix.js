/**
 * ÏïàÏ†ïÏ†ÅÏù∏ ÎØ∏Î¶¨Î≥¥Í∏∞ ÏàòÏ†ï
 * - ÎØ∏Î¶¨Î≥¥Í∏∞ Í∏∞Îä• Î≥µÍµ¨
 * - Ï§ëÎ≥µ Ïã§Ìñâ Î∞©ÏßÄ
 * - Î©îÎâ¥ ÌÅ¥Î¶≠ Ï†ïÏÉÅ ÏûëÎèô
 */

(function() {
    'use strict';
    
    console.log('üîß ÏïàÏ†ïÏ†ÅÏù∏ ÎØ∏Î¶¨Î≥¥Í∏∞ ÏàòÏ†ï ÏãúÏûë');
    
    // ========== 1. Ï†ÑÏó≠ ÏÉÅÌÉú Í¥ÄÎ¶¨ ==========
    window.StablePreview = {
        isActive: false,
        scale: 0.8,
        isTransitioning: false
    };
    
    // ========== 2. ÎØ∏Î¶¨Î≥¥Í∏∞ ÏãúÏä§ÌÖú ÌÜµÌï© ==========
    function setupUnifiedPreview() {
        console.log('üîç ÌÜµÌï© ÎØ∏Î¶¨Î≥¥Í∏∞ ÏÑ§Ï†ï');
        
        // ÏïàÏ†ÑÌïú ÎØ∏Î¶¨Î≥¥Í∏∞ ÌôúÏÑ±Ìôî
        window.enablePreview = function() {
            // Ï§ëÎ≥µ Ïã§Ìñâ Î∞©ÏßÄ
            if (window.StablePreview.isActive || window.StablePreview.isTransitioning) {
                console.log('ÎØ∏Î¶¨Î≥¥Í∏∞ Ïù¥ÎØ∏ ÌôúÏÑ±Ìôî Ï§ë ÎòêÎäî Ï†ÑÌôò Ï§ë');
                return;
            }
            
            window.StablePreview.isTransitioning = true;
            console.log('üîç ÎØ∏Î¶¨Î≥¥Í∏∞ ÌôúÏÑ±Ìôî');
            
            // body Ïä§ÏºÄÏùº ÎåÄÏã† containerÎßå Ïä§ÏºÄÏùº
            const container = document.querySelector('.container');
            if (container) {
                container.style.transition = 'transform 0.3s ease';
                container.style.transform = `scale(${window.StablePreview.scale})`;
                container.style.transformOrigin = 'top center';
                container.style.margin = '0 auto';
            }
            
            // Î™®Îã¨ Î≥¥Ìò∏
            document.querySelectorAll('.modal, .modal-content').forEach(modal => {
                modal.style.zIndex = '10000';
                modal.style.pointerEvents = 'auto';
            });
            
            // ÎØ∏Î¶¨Î≥¥Í∏∞ ÌëúÏãú
            showPreviewIndicator();
            
            window.StablePreview.isActive = true;
            
            setTimeout(() => {
                window.StablePreview.isTransitioning = false;
            }, 300);
        };
        
        // ÏïàÏ†ÑÌïú ÎØ∏Î¶¨Î≥¥Í∏∞ ÎπÑÌôúÏÑ±Ìôî
        window.disablePreview = function() {
            // Ï§ëÎ≥µ Ïã§Ìñâ Î∞©ÏßÄ
            if (!window.StablePreview.isActive || window.StablePreview.isTransitioning) {
                console.log('ÎØ∏Î¶¨Î≥¥Í∏∞ Ïù¥ÎØ∏ ÎπÑÌôúÏÑ±Ìôî Ï§ë ÎòêÎäî Ï†ÑÌôò Ï§ë');
                return;
            }
            
            window.StablePreview.isTransitioning = true;
            console.log('‚ùå ÎØ∏Î¶¨Î≥¥Í∏∞ ÎπÑÌôúÏÑ±Ìôî');
            
            const container = document.querySelector('.container');
            if (container) {
                container.style.transform = 'none';
            }
            
            hidePreviewIndicator();
            
            window.StablePreview.isActive = false;
            
            setTimeout(() => {
                window.StablePreview.isTransitioning = false;
            }, 300);
        };
        
        // Í∏∞Ï°¥ ÏãúÏä§ÌÖúÍ≥º Ïó∞Í≤∞
        if (window.PreviewControl) {
            window.PreviewControl.enable = window.enablePreview;
            window.PreviewControl.disable = window.disablePreview;
            window.PreviewControl.isEnabled = () => window.StablePreview.isActive;
        }
        
        if (window.toggleSafePreview) {
            window.toggleSafePreview = function(enable) {
                if (enable) {
                    window.enablePreview();
                } else {
                    window.disablePreview();
                }
            };
        }
    }
    
    // ========== 3. ÎØ∏Î¶¨Î≥¥Í∏∞ ÌëúÏãúÍ∏∞ ==========
    function showPreviewIndicator() {
        hidePreviewIndicator();
        
        const indicator = document.createElement('div');
        indicator.id = 'previewIndicator';
        indicator.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            font-weight: 600;
            font-size: 14px;
            z-index: 100000;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
            pointer-events: none;
            animation: slideIn 0.3s ease;
        `;
        indicator.textContent = `üîç ÎØ∏Î¶¨Î≥¥Í∏∞ Î™®Îìú (${window.StablePreview.scale * 100}%)`;
        
        document.body.appendChild(indicator);
    }
    
    function hidePreviewIndicator() {
        const indicator = document.getElementById('previewIndicator');
        if (indicator) {
            indicator.remove();
        }
    }
    
    // ========== 4. Î™®Îã¨Ïóê ÎØ∏Î¶¨Î≥¥Í∏∞ Ïª®Ìä∏Î°§ Ï∂îÍ∞Ä ==========
    function addPreviewControls() {
        console.log('üéõÔ∏è ÎØ∏Î¶¨Î≥¥Í∏∞ Ïª®Ìä∏Î°§ Ï∂îÍ∞Ä');
        
        // Í∏ÄÏûê ÌÅ¨Í∏∞ Î™®Îã¨Ïóê ÎØ∏Î¶¨Î≥¥Í∏∞ Ïä¨ÎùºÏù¥Îçî Ï∂îÍ∞Ä
        const addControlToModal = (modalId) => {
            const modal = document.getElementById(modalId);
            if (!modal || modal.querySelector('.preview-control-added')) return;
            
            const modalContent = modal.querySelector('.modal-content') || modal.querySelector('.modal-body');
            if (!modalContent) return;
            
            const previewControl = document.createElement('div');
            previewControl.className = 'preview-control-added';
            previewControl.style.cssText = `
                margin: 20px 0;
                padding: 15px;
                background: #f0f4f8;
                border-radius: 8px;
            `;
            
            previewControl.innerHTML = `
                <div style="margin-bottom: 10px;">
                    <strong>üîç ÎØ∏Î¶¨Î≥¥Í∏∞ ÌÅ¨Í∏∞</strong>
                </div>
                <div style="display: flex; align-items: center; gap: 10px;">
                    <input type="range" id="previewScale" min="30" max="100" value="${window.StablePreview.scale * 100}" 
                           style="flex: 1;">
                    <span id="previewValue">${window.StablePreview.scale * 100}%</span>
                    <button onclick="window.StablePreview.isActive ? window.disablePreview() : window.enablePreview()"
                            style="padding: 5px 15px; border-radius: 5px; background: #667eea; color: white; border: none; cursor: pointer;">
                        ${window.StablePreview.isActive ? 'ÎÅÑÍ∏∞' : 'ÏºúÍ∏∞'}
                    </button>
                </div>
            `;
            
            modalContent.insertBefore(previewControl, modalContent.firstChild);
            
            // Ïä¨ÎùºÏù¥Îçî Ïù¥Î≤§Ìä∏
            const slider = document.getElementById('previewScale');
            const value = document.getElementById('previewValue');
            if (slider) {
                slider.oninput = function() {
                    window.StablePreview.scale = this.value / 100;
                    value.textContent = this.value + '%';
                    if (window.StablePreview.isActive) {
                        const container = document.querySelector('.container');
                        if (container) {
                            container.style.transform = `scale(${window.StablePreview.scale})`;
                        }
                        hidePreviewIndicator();
                        showPreviewIndicator();
                    }
                };
            }
        };
        
        // Î™®Îã¨ Í∞êÏßÄ Î∞è Ïª®Ìä∏Î°§ Ï∂îÍ∞Ä
        const checkModals = () => {
            if (document.getElementById('fontSizeModal')) {
                addControlToModal('fontSizeModal');
                // ÏûêÎèôÏúºÎ°ú ÎØ∏Î¶¨Î≥¥Í∏∞ ÌôúÏÑ±Ìôî
                if (!window.StablePreview.isActive) {
                    window.enablePreview();
                }
            }
            if (document.getElementById('colorModeModal')) {
                addControlToModal('colorModeModal');
                // ÏûêÎèôÏúºÎ°ú ÎØ∏Î¶¨Î≥¥Í∏∞ ÌôúÏÑ±Ìôî
                if (!window.StablePreview.isActive) {
                    window.enablePreview();
                }
            }
        };
        
        // MutationObserverÎ°ú Î™®Îã¨ Í∞êÏßÄ
        const observer = new MutationObserver(checkModals);
        observer.observe(document.body, {
            childList: true,
            subtree: false
        });
        
        // Ï¥àÍ∏∞ Ï≤¥ÌÅ¨
        checkModals();
    }
    
    // ========== 5. Î™®Îã¨ Îã´Ìûê Îïå ÎØ∏Î¶¨Î≥¥Í∏∞ ÎπÑÌôúÏÑ±Ìôî ==========
    function setupModalCloseHandler() {
        console.log('üìù Î™®Îã¨ Îã´Í∏∞ Ìï∏Îì§Îü¨ ÏÑ§Ï†ï');
        
        // ESC ÌÇ§Î°ú Î™®Îã¨ Îã´ÏùÑ Îïå
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                const hasModal = document.querySelector('#fontSizeModal, #colorModeModal');
                if (!hasModal && window.StablePreview.isActive) {
                    window.disablePreview();
                }
            }
        });
        
        // Î™®Îã¨ Ïô∏Î∂Ä ÌÅ¥Î¶≠ÏúºÎ°ú Îã´ÏùÑ Îïå
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('modal')) {
                setTimeout(() => {
                    const hasModal = document.querySelector('#fontSizeModal, #colorModeModal');
                    if (!hasModal && window.StablePreview.isActive) {
                        window.disablePreview();
                    }
                }, 100);
            }
        });
    }
    
    // ========== 6. Ï§ëÎ≥µ Î≤ÑÌäº Ï†ïÎ¶¨ ==========
    function cleanupDuplicateButtons() {
        console.log('üßπ Ï§ëÎ≥µ Î≤ÑÌäº Ï†ïÎ¶¨');
        
        ['fontSizeDetailBtn', 'colorModeDetailBtn'].forEach(id => {
            const buttons = document.querySelectorAll(`#${id}`);
            if (buttons.length > 1) {
                console.log(`${id}: ${buttons.length}Í∞ú ‚Üí 1Í∞ú`);
                for (let i = 1; i < buttons.length; i++) {
                    buttons[i].remove();
                }
            }
        });
    }
    
    // ========== 7. ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ ==========
    function monitorStatus() {
        console.log('\n=== üìä ÏãúÏä§ÌÖú ÏÉÅÌÉú ===');
        
        const status = {
            'ÎØ∏Î¶¨Î≥¥Í∏∞ ÏÉÅÌÉú': window.StablePreview.isActive ? 'ÌôúÏÑ±' : 'ÎπÑÌôúÏÑ±',
            'ÎØ∏Î¶¨Î≥¥Í∏∞ Ïä§ÏºÄÏùº': window.StablePreview.scale * 100 + '%',
            'Ï†ÑÌôò Ï§ë': window.StablePreview.isTransitioning ? 'Ïòà' : 'ÏïÑÎãàÏò§',
            'fontSizeModal': document.getElementById('fontSizeModal') ? 'Ïó¥Î¶º' : 'Îã´Ìûò',
            'colorModeModal': document.getElementById('colorModeModal') ? 'Ïó¥Î¶º' : 'Îã´Ìûò',
            'Ï§ëÎ≥µ Î≤ÑÌäº': {
                'Í∏ÄÏûê ÌÅ¨Í∏∞': document.querySelectorAll('#fontSizeDetailBtn').length,
                'ÏÉâÏÉÅ Î™®Îìú': document.querySelectorAll('#colorModeDetailBtn').length
            }
        };
        
        console.table(status);
        console.log('==================\n');
        
        return status;
    }
    
    // ========== Ï¥àÍ∏∞Ìôî ==========
    function init() {
        console.log('üöÄ ÏïàÏ†ïÏ†ÅÏù∏ ÎØ∏Î¶¨Î≥¥Í∏∞ Ï¥àÍ∏∞Ìôî');
        
        // 1. ÌÜµÌï© ÎØ∏Î¶¨Î≥¥Í∏∞ ÏÑ§Ï†ï
        setupUnifiedPreview();
        
        // 2. ÎØ∏Î¶¨Î≥¥Í∏∞ Ïª®Ìä∏Î°§ Ï∂îÍ∞Ä
        addPreviewControls();
        
        // 3. Î™®Îã¨ Îã´Í∏∞ Ìï∏Îì§Îü¨
        setupModalCloseHandler();
        
        // 4. Ï§ëÎ≥µ Î≤ÑÌäº Ï†ïÎ¶¨
        setTimeout(cleanupDuplicateButtons, 1000);
        
        // 5. Ï£ºÍ∏∞Ï†Å Ï†ïÎ¶¨ (30Ï¥àÎßàÎã§)
        setInterval(cleanupDuplicateButtons, 30000);
        
        console.log('‚úÖ ÏïàÏ†ïÏ†ÅÏù∏ ÎØ∏Î¶¨Î≥¥Í∏∞ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    }
    
    // DOM Î°úÎìú ÌõÑ Ïã§Ìñâ
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        setTimeout(init, 500);
    }
    
    // Ï†ÑÏó≠ Ïú†Ìã∏Î¶¨Ìã∞
    window.stablePreview = {
        enable: window.enablePreview,
        disable: window.disablePreview,
        toggle: () => window.StablePreview.isActive ? window.disablePreview() : window.enablePreview(),
        status: monitorStatus,
        scale: (value) => {
            if (value >= 0.3 && value <= 1) {
                window.StablePreview.scale = value;
                if (window.StablePreview.isActive) {
                    window.disablePreview();
                    window.enablePreview();
                }
            }
        }
    };
    
    console.log('‚úÖ ÏïàÏ†ïÏ†ÅÏù∏ ÎØ∏Î¶¨Î≥¥Í∏∞ Î°úÎìú ÏôÑÎ£å');
    console.log('üí° ÎØ∏Î¶¨Î≥¥Í∏∞ ÌÜ†Í∏Ä: stablePreview.toggle()');
    console.log('üí° ÏÉÅÌÉú ÌôïÏù∏: stablePreview.status()');
    
})();