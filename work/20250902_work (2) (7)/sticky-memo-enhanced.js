/**
 * Ïä§Ìã∞Ïª§ Î©îÎ™® Ìñ•ÏÉÅÎêú ÎìúÎûòÍ∑∏ Î∞è Î¶¨ÏÇ¨Ïù¥Ï¶à ÏãúÏä§ÌÖú
 * Îçî ÎÑìÏùÄ ÌÅ¨Í∏∞ Ï°∞Ï†à Î≤îÏúÑÏôÄ Í∞úÏÑ†Îêú ÎìúÎûòÍ∑∏ Í≤ΩÌóò
 */

(function() {
    'use strict';
    
    console.log('üéØ Ïä§Ìã∞Ïª§ Î©îÎ™® Ìñ•ÏÉÅ Î™®Îìà ÏãúÏûë');
    
    // Ìñ•ÏÉÅÎêú ÏÑ§Ï†ï
    const ENHANCED_CONFIG = {
        // ÌÅ¨Í∏∞ Ï†úÌïú (Ìõ®Ïî¨ Îçî ÎÑìÏùÄ Î≤îÏúÑ)
        size: {
            minWidth: 150,      // ÏµúÏÜå ÎÑàÎπÑ (Í∏∞Ï°¥ 250 ‚Üí 150)
            maxWidth: window.innerWidth * 0.95,  // ÏµúÎåÄ ÎÑàÎπÑ (80% ‚Üí 95%)
            minHeight: 100,     // ÏµúÏÜå ÎÜíÏù¥ (Í∏∞Ï°¥ 200 ‚Üí 100)
            maxHeight: window.innerHeight * 0.95  // ÏµúÎåÄ ÎÜíÏù¥ (80% ‚Üí 95%)
        },
        
        // ÎìúÎûòÍ∑∏ ÏÑ§Ï†ï
        drag: {
            smoothness: 0.92,   // ÎìúÎûòÍ∑∏ Î∂ÄÎìúÎü¨ÏõÄ (0-1)
            magneticEdges: true, // ÌôîÎ©¥ Í∞ÄÏû•ÏûêÎ¶¨ ÏûêÏÑù Ìö®Í≥º
            edgeThreshold: 20,   // Í∞ÄÏû•ÏûêÎ¶¨ ÏûêÏÑù Í±∞Î¶¨
            showGuides: true,    // ÎìúÎûòÍ∑∏ Í∞ÄÏù¥ÎìúÎùºÏù∏ ÌëúÏãú
            hapticFeedback: true // ÏßÑÎèô ÌîºÎìúÎ∞± (Î™®Î∞îÏùº)
        },
        
        // Î¶¨ÏÇ¨Ïù¥Ï¶à ÏÑ§Ï†ï
        resize: {
            handleSize: 30,      // Î¶¨ÏÇ¨Ïù¥Ï¶à Ìï∏Îì§ ÌÅ¨Í∏∞ (Í∏∞Ï°¥ 20 ‚Üí 30)
            handleOpacity: 0.3,  // Ìï∏Îì§ Ìà¨Î™ÖÎèÑ
            showDimensions: true, // ÌÅ¨Í∏∞ ÌëúÏãú
            gridSnap: false,     // Í∑∏Î¶¨Îìú Ïä§ÎÉÖ
            gridSize: 10,        // Í∑∏Î¶¨Îìú ÌÅ¨Í∏∞
            aspectRatio: false   // ÎπÑÏú® Ïú†ÏßÄ
        },
        
        // ÏÑ±Îä• ÏÑ§Ï†ï
        performance: {
            useRAF: true,        // RequestAnimationFrame ÏÇ¨Ïö©
            throttleMs: 8,       // 120fpsÎ•º ÏúÑÌïú throttle
            useGPU: true,        // GPU Í∞ÄÏÜç
            cacheElements: true  // DOM Ï∫êÏã±
        },
        
        // ÏãúÍ∞Å Ìö®Í≥º
        visual: {
            showShadow: true,    // ÎìúÎûòÍ∑∏ Ï§ë Í∑∏Î¶ºÏûê
            glowEffect: true,    // ÎìúÎûòÍ∑∏ Ï§ë Î∞úÍ¥ë Ìö®Í≥º
            bounceAnimation: true, // Î∞îÏö¥Ïä§ Ïï†ÎãàÎ©îÏù¥ÏÖò
            smoothCorners: true   // Î∂ÄÎìúÎü¨Ïö¥ Î™®ÏÑúÎ¶¨
        }
    };
    
    // DOM Ï∫êÏãú Î∞è ÏÉÅÌÉú
    let elements = {};
    let dragState = {
        active: false,
        startX: 0,
        startY: 0,
        currentX: 0,
        currentY: 0,
        velocityX: 0,
        velocityY: 0,
        lastTime: 0
    };
    
    let resizeState = {
        active: false,
        startX: 0,
        startY: 0,
        startWidth: 0,
        startHeight: 0,
        direction: null // 'se', 'sw', 'ne', 'nw', 'n', 's', 'e', 'w'
    };
    
    /**
     * Ï¥àÍ∏∞Ìôî
     */
    function initialize() {
        console.log('üìê Ìñ•ÏÉÅÎêú Ïä§Ìã∞Ïª§ Î©îÎ™® Ï¥àÍ∏∞Ìôî');
        
        // DOM ÏöîÏÜå Ï∫êÏã±
        cacheElements();
        
        if (elements.stickyMemo) {
            // Í∏∞Ï°¥ Í∏∞Îä• Í∞úÏÑ†
            enhanceExistingSticky();
            
            // ÏÉàÎ°úÏö¥ Í∏∞Îä• Ï∂îÍ∞Ä
            addMultiDirectionResize();
            addDragGuides();
            addDimensionDisplay();
            addMagneticEdges();
            addVisualEffects();
            
            // Ïù¥Î≤§Ìä∏ ÏÑ§Ï†ï
            setupEnhancedEvents();
            
            console.log('‚úÖ Ïä§Ìã∞Ïª§ Î©îÎ™® Ìñ•ÏÉÅ ÏôÑÎ£å');
        } else {
            // ÎèôÏ†Å ÏÉùÏÑ± Í∞êÏßÄ
            observeForSticky();
        }
    }
    
    /**
     * DOM ÏöîÏÜå Ï∫êÏã±
     */
    function cacheElements() {
        elements = {
            stickyMemo: document.getElementById('stickyMemo'),
            header: document.getElementById('stickyMemoHeader'),
            content: document.querySelector('.sticky-memo-content'),
            body: document.body
        };
    }
    
    /**
     * Í∏∞Ï°¥ Ïä§Ìã∞Ïª§ Î©îÎ™® Í∞úÏÑ†
     */
    function enhanceExistingSticky() {
        if (!elements.stickyMemo) return;
        
        // ÌÅ¨Í∏∞ Ï†úÌïú ÏóÖÎç∞Ïù¥Ìä∏
        elements.stickyMemo.style.minWidth = ENHANCED_CONFIG.size.minWidth + 'px';
        elements.stickyMemo.style.minHeight = ENHANCED_CONFIG.size.minHeight + 'px';
        elements.stickyMemo.style.maxWidth = ENHANCED_CONFIG.size.maxWidth + 'px';
        elements.stickyMemo.style.maxHeight = ENHANCED_CONFIG.size.maxHeight + 'px';
        
        // GPU Í∞ÄÏÜç
        if (ENHANCED_CONFIG.performance.useGPU) {
            elements.stickyMemo.style.transform = 'translateZ(0)';
            elements.stickyMemo.style.backfaceVisibility = 'hidden';
            elements.stickyMemo.style.perspective = '1000px';
        }
        
        // Î∂ÄÎìúÎü¨Ïö¥ Î™®ÏÑúÎ¶¨
        if (ENHANCED_CONFIG.visual.smoothCorners) {
            elements.stickyMemo.style.borderRadius = '20px';
        }
    }
    
    /**
     * Îã§Î∞©Ìñ• Î¶¨ÏÇ¨Ïù¥Ï¶à Ìï∏Îì§ Ï∂îÍ∞Ä
     */
    function addMultiDirectionResize() {
        if (!elements.stickyMemo) return;
        
        // 8Î∞©Ìñ• Î¶¨ÏÇ¨Ïù¥Ï¶à Ìï∏Îì§ ÏÉùÏÑ±
        const directions = ['n', 's', 'e', 'w', 'ne', 'nw', 'se', 'sw'];
        
        directions.forEach(dir => {
            const handle = document.createElement('div');
            handle.className = `resize-handle resize-${dir}`;
            handle.dataset.direction = dir;
            
            // Ïä§ÌÉÄÏùº ÏÑ§Ï†ï
            const styles = getHandleStyles(dir);
            Object.assign(handle.style, styles);
            
            // Ìò∏Î≤Ñ Ìö®Í≥º
            handle.addEventListener('mouseenter', () => {
                handle.style.opacity = '0.6';
                handle.style.backgroundColor = 'rgba(102, 126, 234, 0.5)';
            });
            
            handle.addEventListener('mouseleave', () => {
                handle.style.opacity = ENHANCED_CONFIG.resize.handleOpacity.toString();
                handle.style.backgroundColor = 'rgba(0, 0, 0, 0.2)';
            });
            
            elements.stickyMemo.appendChild(handle);
        });
    }
    
    /**
     * Î¶¨ÏÇ¨Ïù¥Ï¶à Ìï∏Îì§ Ïä§ÌÉÄÏùº Í∞ÄÏ†∏Ïò§Í∏∞
     */
    function getHandleStyles(direction) {
        const size = ENHANCED_CONFIG.resize.handleSize;
        const halfSize = size / 2;
        
        const baseStyle = {
            position: 'absolute',
            opacity: ENHANCED_CONFIG.resize.handleOpacity.toString(),
            backgroundColor: 'rgba(0, 0, 0, 0.2)',
            zIndex: '100',
            transition: 'all 0.2s ease'
        };
        
        const directionStyles = {
            n: {
                top: '0',
                left: '50%',
                width: '60%',
                height: size + 'px',
                transform: 'translateX(-50%)',
                cursor: 'ns-resize'
            },
            s: {
                bottom: '0',
                left: '50%',
                width: '60%',
                height: size + 'px',
                transform: 'translateX(-50%)',
                cursor: 'ns-resize'
            },
            e: {
                right: '0',
                top: '50%',
                width: size + 'px',
                height: '60%',
                transform: 'translateY(-50%)',
                cursor: 'ew-resize'
            },
            w: {
                left: '0',
                top: '50%',
                width: size + 'px',
                height: '60%',
                transform: 'translateY(-50%)',
                cursor: 'ew-resize'
            },
            ne: {
                top: '0',
                right: '0',
                width: size + 'px',
                height: size + 'px',
                cursor: 'nesw-resize',
                borderRadius: '0 20px 0 0'
            },
            nw: {
                top: '0',
                left: '0',
                width: size + 'px',
                height: size + 'px',
                cursor: 'nwse-resize',
                borderRadius: '20px 0 0 0'
            },
            se: {
                bottom: '0',
                right: '0',
                width: size + 'px',
                height: size + 'px',
                cursor: 'nwse-resize',
                borderRadius: '0 0 20px 0',
                background: 'linear-gradient(135deg, transparent 40%, rgba(0,0,0,0.2) 40%)'
            },
            sw: {
                bottom: '0',
                left: '0',
                width: size + 'px',
                height: size + 'px',
                cursor: 'nesw-resize',
                borderRadius: '0 0 0 20px'
            }
        };
        
        return { ...baseStyle, ...directionStyles[direction] };
    }
    
    /**
     * ÎìúÎûòÍ∑∏ Í∞ÄÏù¥ÎìúÎùºÏù∏ Ï∂îÍ∞Ä
     */
    function addDragGuides() {
        if (!ENHANCED_CONFIG.drag.showGuides) return;
        
        const guidesContainer = document.createElement('div');
        guidesContainer.id = 'dragGuides';
        guidesContainer.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 9998;
            display: none;
        `;
        
        // Ï§ëÏïô Í∞ÄÏù¥ÎìúÎùºÏù∏
        const centerX = document.createElement('div');
        centerX.style.cssText = `
            position: absolute;
            left: 50%;
            top: 0;
            width: 1px;
            height: 100%;
            background: rgba(102, 126, 234, 0.3);
            transform: translateX(-50%);
        `;
        
        const centerY = document.createElement('div');
        centerY.style.cssText = `
            position: absolute;
            top: 50%;
            left: 0;
            width: 100%;
            height: 1px;
            background: rgba(102, 126, 234, 0.3);
            transform: translateY(-50%);
        `;
        
        guidesContainer.appendChild(centerX);
        guidesContainer.appendChild(centerY);
        document.body.appendChild(guidesContainer);
    }
    
    /**
     * ÌÅ¨Í∏∞ ÌëúÏãú Ï∂îÍ∞Ä
     */
    function addDimensionDisplay() {
        if (!ENHANCED_CONFIG.resize.showDimensions) return;
        
        const display = document.createElement('div');
        display.id = 'dimensionDisplay';
        display.style.cssText = `
            position: fixed;
            padding: 8px 12px;
            background: rgba(0, 0, 0, 0.8);
            color: #fff;
            border-radius: 8px;
            font-family: monospace;
            font-size: 12px;
            pointer-events: none;
            z-index: 10001;
            display: none;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
        `;
        
        document.body.appendChild(display);
    }
    
    /**
     * ÏûêÏÑù Ìö®Í≥º Ï∂îÍ∞Ä
     */
    function addMagneticEdges() {
        if (!ENHANCED_CONFIG.drag.magneticEdges) return;
        
        // ÌôîÎ©¥ Í∞ÄÏû•ÏûêÎ¶¨ Í∞êÏßÄ ÏòÅÏó≠ ÏÉùÏÑ±
        const edges = ['top', 'bottom', 'left', 'right'];
        
        edges.forEach(edge => {
            const detector = document.createElement('div');
            detector.className = `edge-detector edge-${edge}`;
            detector.dataset.edge = edge;
            
            const styles = getEdgeDetectorStyles(edge);
            Object.assign(detector.style, styles);
            
            document.body.appendChild(detector);
        });
    }
    
    /**
     * Í∞ÄÏû•ÏûêÎ¶¨ Í∞êÏßÄÍ∏∞ Ïä§ÌÉÄÏùº
     */
    function getEdgeDetectorStyles(edge) {
        const threshold = ENHANCED_CONFIG.drag.edgeThreshold;
        
        const baseStyle = {
            position: 'fixed',
            pointerEvents: 'none',
            zIndex: '9997',
            background: 'transparent'
        };
        
        const edgeStyles = {
            top: {
                top: '0',
                left: '0',
                width: '100%',
                height: threshold + 'px'
            },
            bottom: {
                bottom: '0',
                left: '0',
                width: '100%',
                height: threshold + 'px'
            },
            left: {
                top: '0',
                left: '0',
                width: threshold + 'px',
                height: '100%'
            },
            right: {
                top: '0',
                right: '0',
                width: threshold + 'px',
                height: '100%'
            }
        };
        
        return { ...baseStyle, ...edgeStyles[edge] };
    }
    
    /**
     * ÏãúÍ∞Å Ìö®Í≥º Ï∂îÍ∞Ä
     */
    function addVisualEffects() {
        if (!elements.stickyMemo) return;
        
        // ÎìúÎûòÍ∑∏ Ï§ë Ìö®Í≥ºÎ•º ÏúÑÌïú Ïä§ÌÉÄÏùº
        const style = document.createElement('style');
        style.textContent = `
            .sticky-memo.dragging {
                ${ENHANCED_CONFIG.visual.showShadow ? 'box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3) !important;' : ''}
                ${ENHANCED_CONFIG.visual.glowEffect ? 'filter: drop-shadow(0 0 20px rgba(102, 126, 234, 0.5));' : ''}
                transform: scale(1.02) translateZ(0);
                transition: none !important;
            }
            
            .sticky-memo.resizing {
                ${ENHANCED_CONFIG.visual.showShadow ? 'box-shadow: 0 15px 40px rgba(0, 0, 0, 0.25) !important;' : ''}
                transition: none !important;
            }
            
            .sticky-memo.magnetic-snap {
                ${ENHANCED_CONFIG.visual.bounceAnimation ? 'animation: magneticSnap 0.3s ease-out;' : ''}
            }
            
            @keyframes magneticSnap {
                0% { transform: scale(1) translateZ(0); }
                50% { transform: scale(1.05) translateZ(0); }
                100% { transform: scale(1) translateZ(0); }
            }
            
            .dimension-label {
                position: absolute;
                background: rgba(102, 126, 234, 0.9);
                color: white;
                padding: 4px 8px;
                border-radius: 4px;
                font-size: 11px;
                font-family: monospace;
                pointer-events: none;
                z-index: 10000;
            }
            
            .drag-ghost {
                position: fixed;
                border: 2px dashed rgba(102, 126, 234, 0.5);
                background: rgba(102, 126, 234, 0.1);
                pointer-events: none;
                z-index: 9999;
                border-radius: 20px;
            }
        `;
        
        document.head.appendChild(style);
    }
    
    /**
     * Ìñ•ÏÉÅÎêú Ïù¥Î≤§Ìä∏ ÏÑ§Ï†ï
     */
    function setupEnhancedEvents() {
        // Ìó§Îçî ÎìúÎûòÍ∑∏
        if (elements.header) {
            elements.header.addEventListener('mousedown', handleEnhancedDragStart);
            elements.header.addEventListener('touchstart', handleEnhancedDragStart, { passive: false });
        }
        
        // Î¶¨ÏÇ¨Ïù¥Ï¶à Ìï∏Îì§
        const handles = document.querySelectorAll('.resize-handle');
        handles.forEach(handle => {
            handle.addEventListener('mousedown', handleEnhancedResizeStart);
            handle.addEventListener('touchstart', handleEnhancedResizeStart, { passive: false });
        });
        
        // Ï†ÑÏó≠ Ïù¥Î≤§Ìä∏
        document.addEventListener('mousemove', handleEnhancedMove);
        document.addEventListener('mouseup', handleEnhancedEnd);
        document.addEventListener('touchmove', handleEnhancedMove, { passive: false });
        document.addEventListener('touchend', handleEnhancedEnd);
        
        // ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§
        document.addEventListener('keydown', handleKeyboardShortcuts);
    }
    
    /**
     * Ìñ•ÏÉÅÎêú ÎìúÎûòÍ∑∏ ÏãúÏûë
     */
    function handleEnhancedDragStart(e) {
        if (e.target.closest('button, input, textarea')) return;
        
        e.preventDefault();
        dragState.active = true;
        dragState.lastTime = performance.now();
        
        const touch = e.touches ? e.touches[0] : e;
        dragState.startX = touch.clientX;
        dragState.startY = touch.clientY;
        
        const rect = elements.stickyMemo.getBoundingClientRect();
        dragState.currentX = rect.left;
        dragState.currentY = rect.top;
        
        // ÏãúÍ∞Å Ìö®Í≥º
        elements.stickyMemo.classList.add('dragging');
        
        // Í∞ÄÏù¥Îìú ÌëúÏãú
        const guides = document.getElementById('dragGuides');
        if (guides) guides.style.display = 'block';
        
        // Í≥†Ïä§Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
        createDragGhost(rect);
        
        // Ïª§ÏÑú Î≥ÄÍ≤Ω
        document.body.style.cursor = 'grabbing';
        elements.header.style.cursor = 'grabbing';
    }
    
    /**
     * Ìñ•ÏÉÅÎêú Î¶¨ÏÇ¨Ïù¥Ï¶à ÏãúÏûë
     */
    function handleEnhancedResizeStart(e) {
        e.preventDefault();
        e.stopPropagation();
        
        resizeState.active = true;
        resizeState.direction = e.currentTarget.dataset.direction;
        
        const touch = e.touches ? e.touches[0] : e;
        resizeState.startX = touch.clientX;
        resizeState.startY = touch.clientY;
        
        const rect = elements.stickyMemo.getBoundingClientRect();
        resizeState.startWidth = rect.width;
        resizeState.startHeight = rect.height;
        
        // ÏãúÍ∞Å Ìö®Í≥º
        elements.stickyMemo.classList.add('resizing');
        
        // ÌÅ¨Í∏∞ ÌëúÏãú
        showDimensions(rect.width, rect.height);
        
        // Ïª§ÏÑú ÏÑ§Ï†ï
        document.body.style.cursor = e.currentTarget.style.cursor;
    }
    
    /**
     * Ìñ•ÏÉÅÎêú Ïù¥Îèô Ï≤òÎ¶¨
     */
    function handleEnhancedMove(e) {
        if (dragState.active) {
            handleEnhancedDrag(e);
        } else if (resizeState.active) {
            handleEnhancedResize(e);
        }
    }
    
    /**
     * Ìñ•ÏÉÅÎêú ÎìúÎûòÍ∑∏ Ï≤òÎ¶¨
     */
    function handleEnhancedDrag(e) {
        e.preventDefault();
        
        const touch = e.touches ? e.touches[0] : e;
        const currentTime = performance.now();
        const deltaTime = currentTime - dragState.lastTime;
        
        // ÏÉà ÏúÑÏπò Í≥ÑÏÇ∞
        let newX = dragState.currentX + (touch.clientX - dragState.startX);
        let newY = dragState.currentY + (touch.clientY - dragState.startY);
        
        // ÏÜçÎèÑ Í≥ÑÏÇ∞ (Í¥ÄÏÑ± Ìö®Í≥ºÏö©)
        if (deltaTime > 0) {
            dragState.velocityX = (newX - dragState.currentX) / deltaTime;
            dragState.velocityY = (newY - dragState.currentY) / deltaTime;
        }
        
        // ÏûêÏÑù Ìö®Í≥º Ï†ÅÏö©
        if (ENHANCED_CONFIG.drag.magneticEdges) {
            const magneticPos = applyMagneticEffect(newX, newY);
            newX = magneticPos.x;
            newY = magneticPos.y;
        }
        
        // Í≤ΩÍ≥Ñ Ï†úÌïú (Îçî Ïú†Ïó∞ÌïòÍ≤å)
        const rect = elements.stickyMemo.getBoundingClientRect();
        const margin = 50; // ÌôîÎ©¥ Î∞ñÏúºÎ°ú ÏùºÎ∂Ä ÎÇòÍ∞à Ïàò ÏûàÏùå
        
        newX = Math.max(-rect.width + margin, Math.min(window.innerWidth - margin, newX));
        newY = Math.max(-margin, Math.min(window.innerHeight - margin, newY));
        
        // Î∂ÄÎìúÎü¨Ïö¥ Ïù¥Îèô (ÏÑ†ÌÉùÏ†Å)
        if (ENHANCED_CONFIG.drag.smoothness < 1) {
            const smooth = ENHANCED_CONFIG.drag.smoothness;
            newX = dragState.currentX + (newX - dragState.currentX) * smooth;
            newY = dragState.currentY + (newY - dragState.currentY) * smooth;
        }
        
        // ÏúÑÏπò Ï†ÅÏö©
        if (ENHANCED_CONFIG.performance.useRAF) {
            requestAnimationFrame(() => {
                elements.stickyMemo.style.left = newX + 'px';
                elements.stickyMemo.style.top = newY + 'px';
                updateDragGhost(newX, newY);
            });
        } else {
            elements.stickyMemo.style.left = newX + 'px';
            elements.stickyMemo.style.top = newY + 'px';
        }
        
        dragState.currentX = newX;
        dragState.currentY = newY;
        dragState.startX = touch.clientX;
        dragState.startY = touch.clientY;
        dragState.lastTime = currentTime;
    }
    
    /**
     * Ìñ•ÏÉÅÎêú Î¶¨ÏÇ¨Ïù¥Ï¶à Ï≤òÎ¶¨
     */
    function handleEnhancedResize(e) {
        e.preventDefault();
        
        const touch = e.touches ? e.touches[0] : e;
        const deltaX = touch.clientX - resizeState.startX;
        const deltaY = touch.clientY - resizeState.startY;
        
        let newWidth = resizeState.startWidth;
        let newHeight = resizeState.startHeight;
        let newX = parseFloat(elements.stickyMemo.style.left) || 0;
        let newY = parseFloat(elements.stickyMemo.style.top) || 0;
        
        // Î∞©Ìñ•Ïóê Îî∞Î•∏ ÌÅ¨Í∏∞ Ï°∞Ï†ï
        switch (resizeState.direction) {
            case 'se': // ÎÇ®ÎèôÏ™Ω
                newWidth += deltaX;
                newHeight += deltaY;
                break;
            case 'sw': // ÎÇ®ÏÑúÏ™Ω
                newWidth -= deltaX;
                newHeight += deltaY;
                newX += deltaX;
                break;
            case 'ne': // Î∂ÅÎèôÏ™Ω
                newWidth += deltaX;
                newHeight -= deltaY;
                newY += deltaY;
                break;
            case 'nw': // Î∂ÅÏÑúÏ™Ω
                newWidth -= deltaX;
                newHeight -= deltaY;
                newX += deltaX;
                newY += deltaY;
                break;
            case 'n': // Î∂ÅÏ™Ω
                newHeight -= deltaY;
                newY += deltaY;
                break;
            case 's': // ÎÇ®Ï™Ω
                newHeight += deltaY;
                break;
            case 'e': // ÎèôÏ™Ω
                newWidth += deltaX;
                break;
            case 'w': // ÏÑúÏ™Ω
                newWidth -= deltaX;
                newX += deltaX;
                break;
        }
        
        // Í∑∏Î¶¨Îìú Ïä§ÎÉÖ (ÏÑ†ÌÉùÏ†Å)
        if (ENHANCED_CONFIG.resize.gridSnap) {
            const grid = ENHANCED_CONFIG.resize.gridSize;
            newWidth = Math.round(newWidth / grid) * grid;
            newHeight = Math.round(newHeight / grid) * grid;
        }
        
        // ÎπÑÏú® Ïú†ÏßÄ (ÏÑ†ÌÉùÏ†Å)
        if (ENHANCED_CONFIG.resize.aspectRatio && e.shiftKey) {
            const ratio = resizeState.startWidth / resizeState.startHeight;
            if (Math.abs(deltaX) > Math.abs(deltaY)) {
                newHeight = newWidth / ratio;
            } else {
                newWidth = newHeight * ratio;
            }
        }
        
        // ÌÅ¨Í∏∞ Ï†úÌïú Ï†ÅÏö© (Îçî ÎÑìÏùÄ Î≤îÏúÑ)
        newWidth = Math.max(ENHANCED_CONFIG.size.minWidth, Math.min(newWidth, ENHANCED_CONFIG.size.maxWidth));
        newHeight = Math.max(ENHANCED_CONFIG.size.minHeight, Math.min(newHeight, ENHANCED_CONFIG.size.maxHeight));
        
        // Ï†ÅÏö©
        if (ENHANCED_CONFIG.performance.useRAF) {
            requestAnimationFrame(() => {
                elements.stickyMemo.style.width = newWidth + 'px';
                elements.stickyMemo.style.height = newHeight + 'px';
                if (resizeState.direction.includes('w')) {
                    elements.stickyMemo.style.left = newX + 'px';
                }
                if (resizeState.direction.includes('n')) {
                    elements.stickyMemo.style.top = newY + 'px';
                }
                updateDimensions(newWidth, newHeight);
            });
        } else {
            elements.stickyMemo.style.width = newWidth + 'px';
            elements.stickyMemo.style.height = newHeight + 'px';
            if (resizeState.direction.includes('w')) {
                elements.stickyMemo.style.left = newX + 'px';
            }
            if (resizeState.direction.includes('n')) {
                elements.stickyMemo.style.top = newY + 'px';
            }
        }
    }
    
    /**
     * Ìñ•ÏÉÅÎêú Ï¢ÖÎ£å Ï≤òÎ¶¨
     */
    function handleEnhancedEnd(e) {
        if (dragState.active) {
            // Í¥ÄÏÑ± Ìö®Í≥º (ÏÑ†ÌÉùÏ†Å)
            if (Math.abs(dragState.velocityX) > 0.5 || Math.abs(dragState.velocityY) > 0.5) {
                applyInertia();
            }
            
            // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
            dragState.active = false;
            elements.stickyMemo.classList.remove('dragging');
            
            // Í∞ÄÏù¥Îìú Ïà®Í∏∞Í∏∞
            const guides = document.getElementById('dragGuides');
            if (guides) guides.style.display = 'none';
            
            // Í≥†Ïä§Ìä∏ Ï†úÍ±∞
            removeDragGhost();
            
            // Ïª§ÏÑú Î≥µÏõê
            document.body.style.cursor = '';
            elements.header.style.cursor = 'move';
            
            // ÏúÑÏπò Ï†ÄÏû•
            savePosition();
        }
        
        if (resizeState.active) {
            resizeState.active = false;
            elements.stickyMemo.classList.remove('resizing');
            
            // ÌÅ¨Í∏∞ ÌëúÏãú Ïà®Í∏∞Í∏∞
            hideDimensions();
            
            // Ïª§ÏÑú Î≥µÏõê
            document.body.style.cursor = '';
            
            // ÌÅ¨Í∏∞ Ï†ÄÏû•
            saveSize();
        }
    }
    
    /**
     * ÏûêÏÑù Ìö®Í≥º Ï†ÅÏö©
     */
    function applyMagneticEffect(x, y) {
        const threshold = ENHANCED_CONFIG.drag.edgeThreshold;
        const rect = elements.stickyMemo.getBoundingClientRect();
        
        let snapX = x;
        let snapY = y;
        
        // Ï¢åÏ∏° Í∞ÄÏû•ÏûêÎ¶¨
        if (x < threshold) {
            snapX = 0;
            elements.stickyMemo.classList.add('magnetic-snap');
        }
        // Ïö∞Ï∏° Í∞ÄÏû•ÏûêÎ¶¨
        else if (x + rect.width > window.innerWidth - threshold) {
            snapX = window.innerWidth - rect.width;
            elements.stickyMemo.classList.add('magnetic-snap');
        }
        
        // ÏÉÅÎã® Í∞ÄÏû•ÏûêÎ¶¨
        if (y < threshold) {
            snapY = 0;
            elements.stickyMemo.classList.add('magnetic-snap');
        }
        // ÌïòÎã® Í∞ÄÏû•ÏûêÎ¶¨
        else if (y + rect.height > window.innerHeight - threshold) {
            snapY = window.innerHeight - rect.height;
            elements.stickyMemo.classList.add('magnetic-snap');
        }
        
        // Ï§ëÏïô Ïä§ÎÉÖ (Ctrl ÌÇ§Î•º ÎàÑÎ•¥Í≥† ÏûàÏùÑ Îïå)
        if (event.ctrlKey) {
            const centerX = (window.innerWidth - rect.width) / 2;
            const centerY = (window.innerHeight - rect.height) / 2;
            
            if (Math.abs(x - centerX) < threshold * 2) {
                snapX = centerX;
                elements.stickyMemo.classList.add('magnetic-snap');
            }
            if (Math.abs(y - centerY) < threshold * 2) {
                snapY = centerY;
                elements.stickyMemo.classList.add('magnetic-snap');
            }
        }
        
        setTimeout(() => {
            elements.stickyMemo.classList.remove('magnetic-snap');
        }, 300);
        
        return { x: snapX, y: snapY };
    }
    
    /**
     * Í¥ÄÏÑ± Ìö®Í≥º Ï†ÅÏö©
     */
    function applyInertia() {
        const friction = 0.95;
        const minVelocity = 0.1;
        
        function animate() {
            if (Math.abs(dragState.velocityX) > minVelocity || Math.abs(dragState.velocityY) > minVelocity) {
                dragState.currentX += dragState.velocityX * 10;
                dragState.currentY += dragState.velocityY * 10;
                
                // Í≤ΩÍ≥Ñ Ï≤¥ÌÅ¨
                const rect = elements.stickyMemo.getBoundingClientRect();
                dragState.currentX = Math.max(0, Math.min(window.innerWidth - rect.width, dragState.currentX));
                dragState.currentY = Math.max(0, Math.min(window.innerHeight - rect.height, dragState.currentY));
                
                elements.stickyMemo.style.left = dragState.currentX + 'px';
                elements.stickyMemo.style.top = dragState.currentY + 'px';
                
                dragState.velocityX *= friction;
                dragState.velocityY *= friction;
                
                requestAnimationFrame(animate);
            }
        }
        
        requestAnimationFrame(animate);
    }
    
    /**
     * ÎìúÎûòÍ∑∏ Í≥†Ïä§Ìä∏ ÏÉùÏÑ±
     */
    function createDragGhost(rect) {
        const ghost = document.createElement('div');
        ghost.className = 'drag-ghost';
        ghost.id = 'dragGhost';
        ghost.style.width = rect.width + 'px';
        ghost.style.height = rect.height + 'px';
        ghost.style.left = rect.left + 'px';
        ghost.style.top = rect.top + 'px';
        document.body.appendChild(ghost);
    }
    
    /**
     * ÎìúÎûòÍ∑∏ Í≥†Ïä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
     */
    function updateDragGhost(x, y) {
        const ghost = document.getElementById('dragGhost');
        if (ghost) {
            ghost.style.left = x + 'px';
            ghost.style.top = y + 'px';
        }
    }
    
    /**
     * ÎìúÎûòÍ∑∏ Í≥†Ïä§Ìä∏ Ï†úÍ±∞
     */
    function removeDragGhost() {
        const ghost = document.getElementById('dragGhost');
        if (ghost) {
            ghost.remove();
        }
    }
    
    /**
     * ÌÅ¨Í∏∞ ÌëúÏãú
     */
    function showDimensions(width, height) {
        if (!ENHANCED_CONFIG.resize.showDimensions) return;
        
        const display = document.getElementById('dimensionDisplay');
        if (display) {
            display.textContent = `${Math.round(width)} √ó ${Math.round(height)}`;
            display.style.display = 'block';
            
            const rect = elements.stickyMemo.getBoundingClientRect();
            display.style.left = (rect.left + rect.width / 2 - display.offsetWidth / 2) + 'px';
            display.style.top = (rect.top - 40) + 'px';
        }
    }
    
    /**
     * ÌÅ¨Í∏∞ ÏóÖÎç∞Ïù¥Ìä∏
     */
    function updateDimensions(width, height) {
        const display = document.getElementById('dimensionDisplay');
        if (display && display.style.display === 'block') {
            display.textContent = `${Math.round(width)} √ó ${Math.round(height)}`;
            
            const rect = elements.stickyMemo.getBoundingClientRect();
            display.style.left = (rect.left + rect.width / 2 - display.offsetWidth / 2) + 'px';
            display.style.top = (rect.top - 40) + 'px';
        }
    }
    
    /**
     * ÌÅ¨Í∏∞ ÌëúÏãú Ïà®Í∏∞Í∏∞
     */
    function hideDimensions() {
        const display = document.getElementById('dimensionDisplay');
        if (display) {
            display.style.display = 'none';
        }
    }
    
    /**
     * ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§ Ï≤òÎ¶¨
     */
    function handleKeyboardShortcuts(e) {
        if (!elements.stickyMemo) return;
        
        // Alt + ÌôîÏÇ¥Ìëú: ÎØ∏ÏÑ∏ Ïù¥Îèô
        if (e.altKey && !dragState.active && !resizeState.active) {
            const step = e.shiftKey ? 10 : 1; // ShiftÎ°ú ÌÅ∞ Îã®ÏúÑ Ïù¥Îèô
            const rect = elements.stickyMemo.getBoundingClientRect();
            let newX = rect.left;
            let newY = rect.top;
            
            switch (e.key) {
                case 'ArrowLeft':
                    newX -= step;
                    break;
                case 'ArrowRight':
                    newX += step;
                    break;
                case 'ArrowUp':
                    newY -= step;
                    break;
                case 'ArrowDown':
                    newY += step;
                    break;
                default:
                    return;
            }
            
            e.preventDefault();
            elements.stickyMemo.style.left = newX + 'px';
            elements.stickyMemo.style.top = newY + 'px';
            savePosition();
        }
        
        // Ctrl + Alt + ÌôîÏÇ¥Ìëú: ÌÅ¨Í∏∞ Ï°∞Ï†à
        if (e.ctrlKey && e.altKey && !resizeState.active) {
            const step = e.shiftKey ? 20 : 5;
            const rect = elements.stickyMemo.getBoundingClientRect();
            let newWidth = rect.width;
            let newHeight = rect.height;
            
            switch (e.key) {
                case 'ArrowLeft':
                    newWidth -= step;
                    break;
                case 'ArrowRight':
                    newWidth += step;
                    break;
                case 'ArrowUp':
                    newHeight -= step;
                    break;
                case 'ArrowDown':
                    newHeight += step;
                    break;
                default:
                    return;
            }
            
            e.preventDefault();
            newWidth = Math.max(ENHANCED_CONFIG.size.minWidth, Math.min(newWidth, ENHANCED_CONFIG.size.maxWidth));
            newHeight = Math.max(ENHANCED_CONFIG.size.minHeight, Math.min(newHeight, ENHANCED_CONFIG.size.maxHeight));
            
            elements.stickyMemo.style.width = newWidth + 'px';
            elements.stickyMemo.style.height = newHeight + 'px';
            saveSize();
        }
    }
    
    /**
     * ÏúÑÏπò Ï†ÄÏû•
     */
    function savePosition() {
        const rect = elements.stickyMemo.getBoundingClientRect();
        const position = {
            x: rect.left,
            y: rect.top,
            timestamp: Date.now()
        };
        localStorage.setItem('stickyMemoPosition', JSON.stringify(position));
    }
    
    /**
     * ÌÅ¨Í∏∞ Ï†ÄÏû•
     */
    function saveSize() {
        const size = {
            width: elements.stickyMemo.style.width,
            height: elements.stickyMemo.style.height,
            timestamp: Date.now()
        };
        localStorage.setItem('stickyMemoSize', JSON.stringify(size));
    }
    
    /**
     * ÎèôÏ†Å ÏÉùÏÑ± Í∞êÏßÄ
     */
    function observeForSticky() {
        const observer = new MutationObserver((mutations) => {
            for (const mutation of mutations) {
                for (const node of mutation.addedNodes) {
                    if (node.id === 'stickyMemo' || (node.querySelector && node.querySelector('#stickyMemo'))) {
                        observer.disconnect();
                        setTimeout(initialize, 100);
                        return;
                    }
                }
            }
        });
        
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    }
    
    // Ï¥àÍ∏∞Ìôî Ïã§Ìñâ
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initialize);
    } else {
        setTimeout(initialize, 100);
    }
    
    // Ï†ÑÏó≠ API Ï†úÍ≥µ
    window.StickyMemoEnhanced = {
        getConfig: () => ENHANCED_CONFIG,
        updateConfig: (newConfig) => {
            Object.assign(ENHANCED_CONFIG, newConfig);
            console.log('üìê ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏Îê®:', ENHANCED_CONFIG);
        },
        resetPosition: () => {
            if (elements.stickyMemo) {
                elements.stickyMemo.style.left = '50%';
                elements.stickyMemo.style.top = '50%';
                elements.stickyMemo.style.transform = 'translate(-50%, -50%)';
                savePosition();
            }
        },
        resetSize: () => {
            if (elements.stickyMemo) {
                elements.stickyMemo.style.width = '350px';
                elements.stickyMemo.style.height = '400px';
                saveSize();
            }
        }
    };
    
    console.log('‚ú® Ïä§Ìã∞Ïª§ Î©îÎ™® Ìñ•ÏÉÅ Î™®Îìà Î°úÎìú ÏôÑÎ£å');
    
})();