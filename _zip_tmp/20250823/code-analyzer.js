/**
 * ÏΩîÎìú Î∂ÑÏÑù Î∞è Ïò§Î•ò Í≤ÄÏÇ¨ Ïä§ÌÅ¨Î¶ΩÌä∏
 */

const fs = require('fs');
const path = require('path');

// Í≤ÄÏÇ¨Ìï† JavaScript ÌååÏùºÎì§
const jsFiles = [
  'preview-control.js',
  'advanced-controls-modal.js',
  'modal-drag-system.js',
  'global-esc-handler.js',
  'unified-calendar-system.js'
];

console.log('üîç JavaScript ÌååÏùº Ïò§Î•ò Í≤ÄÏÇ¨ ÏãúÏûë\n');

let totalErrors = 0;
let totalWarnings = 0;
const detailedIssues = {};

jsFiles.forEach(file => {
  try {
    const code = fs.readFileSync(file, 'utf8');
    const fileIssues = [];
    
    // 1. Íµ¨Î¨∏ Í≤ÄÏÇ¨
    try {
      new Function(code);
      console.log('‚úÖ', file, '- Íµ¨Î¨∏ Ïò§Î•ò ÏóÜÏùå');
    } catch (syntaxError) {
      console.log('‚ùå', file, '- Íµ¨Î¨∏ Ïò§Î•ò:', syntaxError.message);
      totalErrors++;
      fileIssues.push({
        type: 'error',
        message: `Íµ¨Î¨∏ Ïò§Î•ò: ${syntaxError.message}`
      });
    }
    
    // 2. Ïû†Ïû¨Ï†Å Î¨∏Ï†ú Í≤ÄÏÇ¨
    const lines = code.split('\n');
    
    lines.forEach((line, index) => {
      const lineNum = index + 1;
      
      // console.log ÏÇ¨Ïö© ÌôïÏù∏
      if (line.includes('console.log') && !line.trim().startsWith('//')) {
        fileIssues.push({
          type: 'warning',
          line: lineNum,
          message: 'console.log ÏÇ¨Ïö© (ÌîÑÎ°úÎçïÏÖòÏóêÏÑú Ï†úÍ±∞ Í∂åÏû•)',
          code: line.trim()
        });
        totalWarnings++;
      }
      
      // TODO/FIXME Ï£ºÏÑù
      if (line.includes('TODO') || line.includes('FIXME')) {
        fileIssues.push({
          type: 'info',
          line: lineNum,
          message: 'TODO/FIXME Ï£ºÏÑù Î∞úÍ≤¨',
          code: line.trim()
        });
      }
      
      // == ÎåÄÏã† === ÏÇ¨Ïö© Í∂åÏû•
      if (line.match(/[^=!]==[^=]/)) {
        fileIssues.push({
          type: 'warning',
          line: lineNum,
          message: '== ÏÇ¨Ïö© Î∞úÍ≤¨ (=== ÏÇ¨Ïö© Í∂åÏû•)',
          code: line.trim()
        });
        totalWarnings++;
      }
      
      // != ÎåÄÏã† !== ÏÇ¨Ïö© Í∂åÏû•
      if (line.match(/!=[^=]/)) {
        fileIssues.push({
          type: 'warning',
          line: lineNum,
          message: '!= ÏÇ¨Ïö© Î∞úÍ≤¨ (!== ÏÇ¨Ïö© Í∂åÏû•)',
          code: line.trim()
        });
        totalWarnings++;
      }
      
      // undefined ÏßÅÏ†ë ÎπÑÍµê
      if (line.includes('== undefined') || line.includes('!= undefined')) {
        fileIssues.push({
          type: 'warning',
          line: lineNum,
          message: 'undefined ÏßÅÏ†ë ÎπÑÍµê (typeof ÏÇ¨Ïö© Í∂åÏû•)',
          code: line.trim()
        });
        totalWarnings++;
      }
      
      // Ï§ëÎ≥µ Î≥ÄÏàò ÏÑ†Ïñ∏ Ï≤¥ÌÅ¨
      if (line.match(/\b(var|let|const)\s+\w+/)) {
        const varMatch = line.match(/\b(var|let|const)\s+(\w+)/);
        if (varMatch && varMatch[1] === 'var') {
          fileIssues.push({
            type: 'warning',
            line: lineNum,
            message: 'var ÏÇ¨Ïö© Î∞úÍ≤¨ (let/const ÏÇ¨Ïö© Í∂åÏû•)',
            code: line.trim()
          });
          totalWarnings++;
        }
      }
      
      // ÏÑ∏ÎØ∏ÏΩúÎ°† ÎàÑÎùΩ Ï≤¥ÌÅ¨ (Í∞ÑÎã®Ìïú Ï≤¥ÌÅ¨)
      if (line.trim() && 
          !line.trim().endsWith(';') && 
          !line.trim().endsWith('{') && 
          !line.trim().endsWith('}') && 
          !line.trim().startsWith('//') &&
          !line.trim().startsWith('*') &&
          !line.trim().startsWith('/*') &&
          !line.includes('if') &&
          !line.includes('else') &&
          !line.includes('for') &&
          !line.includes('while') &&
          !line.includes('function') &&
          !line.includes('=>') &&
          line.includes('=')) {
        // ÎÑàÎ¨¥ ÎßéÏùÄ false positiveÍ∞Ä ÏûàÏùÑ Ïàò ÏûàÏúºÎØÄÎ°ú Ï£ºÏÑù Ï≤òÎ¶¨
        // fileIssues.push({
        //   type: 'info',
        //   line: lineNum,
        //   message: 'ÏÑ∏ÎØ∏ÏΩúÎ°† ÎàÑÎùΩ Í∞ÄÎä•ÏÑ±',
        //   code: line.trim()
        // });
      }
    });
    
    // 3. Î≥µÏû°ÎèÑ Î∂ÑÏÑù
    const functionCount = (code.match(/function\s+\w+/g) || []).length;
    const arrowFunctionCount = (code.match(/=>/g) || []).length;
    const totalFunctions = functionCount + arrowFunctionCount;
    
    if (totalFunctions > 30) {
      fileIssues.push({
        type: 'info',
        message: `ÌååÏùºÏóê Ìï®ÏàòÍ∞Ä ÎßéÏùå (${totalFunctions}Í∞ú) - Î¶¨Ìå©ÌÜ†ÎßÅ Í≥†Î†§`
      });
    }
    
    // 4. ÌååÏùº ÌÅ¨Í∏∞ Ï≤¥ÌÅ¨
    const fileSizeKB = Buffer.byteLength(code, 'utf8') / 1024;
    if (fileSizeKB > 100) {
      fileIssues.push({
        type: 'info',
        message: `ÌååÏùº ÌÅ¨Í∏∞Í∞Ä ÌÅº (${fileSizeKB.toFixed(2)}KB) - Î∂ÑÌï† Í≥†Î†§`
      });
    }
    
    if (fileIssues.length > 0) {
      detailedIssues[file] = fileIssues;
      const warningCount = fileIssues.filter(i => i.type === 'warning').length;
      const infoCount = fileIssues.filter(i => i.type === 'info').length;
      if (warningCount > 0) {
        console.log(`‚ö†Ô∏è  ${file} - Í≤ΩÍ≥†: ${warningCount}Í∞ú, Ï†ïÎ≥¥: ${infoCount}Í∞ú`);
      }
    }
    
  } catch (error) {
    console.log('‚ùå', file, '- ÌååÏùº ÏùΩÍ∏∞ Ïò§Î•ò:', error.message);
    totalErrors++;
  }
});

// ÏÉÅÏÑ∏ Í≤∞Í≥º Ï∂úÎ†•
console.log('\nüìä Í≤ÄÏÇ¨ ÏôÑÎ£å ÏöîÏïΩ:');
console.log('  ‚úÖ Í≤ÄÏÇ¨Ìïú ÌååÏùº:', jsFiles.length, 'Í∞ú');
console.log('  ‚ùå Ïò§Î•ò:', totalErrors, 'Í∞ú');
console.log('  ‚ö†Ô∏è  Í≤ΩÍ≥†:', totalWarnings, 'Í∞ú');

// Ï£ºÏöî Î¨∏Ï†úÏ†êÎßå Ï∂úÎ†•
if (Object.keys(detailedIssues).length > 0) {
  console.log('\nüìã Ï£ºÏöî Î∞úÍ≤¨ ÏÇ¨Ìï≠:');
  for (const [file, issues] of Object.entries(detailedIssues)) {
    const errors = issues.filter(i => i.type === 'error');
    const warnings = issues.filter(i => i.type === 'warning');
    
    if (errors.length > 0 || warnings.length > 0) {
      console.log(`\n  ${file}:`);
      errors.forEach(issue => {
        console.log(`    ‚ùå ${issue.message}`);
      });
      warnings.slice(0, 3).forEach(issue => {
        console.log(`    ‚ö†Ô∏è  Line ${issue.line}: ${issue.message}`);
      });
      if (warnings.length > 3) {
        console.log(`    ... Í∑∏ Ïô∏ ${warnings.length - 3}Í∞ú Í≤ΩÍ≥†`);
      }
    }
  }
}

console.log('\n‚ú® Î∂ÑÏÑù ÏôÑÎ£å!');